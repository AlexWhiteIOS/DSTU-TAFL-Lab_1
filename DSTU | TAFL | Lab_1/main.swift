import Foundation

func numberWordInAlphabet(Alphabet alphabet: Array<String>, Word word: String, Position position: Int) -> Int {
    //print(alphabet)
    //print("–ë—É–∫–≤–∞ –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º \(position): \(word[word.index(word.startIndex, offsetBy: position-1)])")
    let wordd = String(word[word.index(word.startIndex, offsetBy: position-1)])
    for i in 0..<alphabet.count {
        if alphabet[i] == wordd {
            //print("–í–æ–∑–≤—Ä–∞—â–∞—é \(i + 1)")
            return i + 1
        }
    }
    return 0
}
//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –±—É–∫–≤—ã
func checkDublicates(Array array: Array<String>, Value value: String) -> Bool {
    for i in (0..<array.count) {
        if value == array[i] {
            print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í—ã –≤–≤–µ–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª üö®")
            return false
        }
    }
    return true
}

//–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞
func createArray() -> Array<String> {
    print("""
==============================================================================================
–ü—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞:
1. –í–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–≤—É—Ö.
3. –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ
==============================================================================================
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∞–ª—Ñ–∞–≤–∏—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –Ω–∞–∂–∞—Ç—å Enter.
–ß—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∞–ª—Ñ–∞–≤–∏—Ç, –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª - –Ω–∞–∂–∞—Ç—å Enter.
==============================================================================================
""")
    var array: Array<String> = []
    while true {
        print("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤ –∞–ª—Ñ–∞–≤–∏—Ç: ")
        let input = readLine()
        if let input = input {
            
            if input == " " {
                print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ–±–µ–ª üö®")
                continue
            }
            //–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω Enter –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ –¥–≤—É—Ö
            if input == "" && array.count < 2 {
                print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í—ã –≤–≤–µ–ª–∏ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –±—É–∫–≤—ã üö®")
                continue
            }
            //–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω Enter –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö
            if input == "" && array.count >= 2 {
                print("==================================================")
                print("‚úÖ –ê–ª—Ñ–∞–≤–∏—Ç —Å–æ–∑–¥–∞–Ω: \(array) ‚úÖ")
                print("==================================================")
                break
            }
            //–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if input.count > 1 {
                print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ üö®")
                continue
            }
            //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ
            if checkDublicates(Array: array, Value: input) {
                array.append(input)
            }
            
        }
    }
    return array
}

//–ú–µ–Ω—é
func actionMenu() -> Int{
    print("""
==============================================================================================
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1. –ü–æ —Å–ª–æ–≤—É –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä (–≤–≤–µ–¥–∏—Ç–µ 1)
2. –ü–æ –Ω–æ–º–µ—Ä—É –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ (–≤–≤–µ–¥–∏—Ç–µ 2)
==============================================================================================
""")
    while true {
        let input = readLine()
        if let input = Int(input!) {
            
            if input == 1 {
                return 1
            }else if input == 2 {
                return 2
            }
            else {
                print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ üö®")
                continue
            }
            
        }else {
            print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ üö®")
            continue
        }
    }
}

//–ü–µ—Ä–µ–≤–æ–¥ –∫ —Å—Ç–µ–ø–µ–Ω–∏
func valueToPower(Value a: Int) -> String {
    let dictionary = [0: "‚Å∞", 1: "¬π", 2: "¬≤", 3: "¬≥", 4: "‚Å¥", 5: "‚Åµ", 6: "‚Å∂", 7: "‚Å∑", 8: "‚Å∏", 9: "‚Åπ"]
    
    if a >= 0 && a <= 9 {
        return dictionary[a] ?? "nil"
    }else if a > 9 {
        let temp = String(a)
        var export: String = ""
        for i in temp {
            let power = dictionary[Int(String(i))!]
            export.append(power!)
        }
        return export
        
    }else{
        print("üö® Error occured! –°—Ç–µ–ø–µ–Ω—å –º–µ–Ω—å—à–µ 0 üö®")
        exit(0)
    }
}

//–í–≤–æ–¥ —Å–ª–æ–≤–∞
func inputWord(Alphabet alphabet: Array<String>) -> String {
    var array: String = ""
    while true {
        print("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ")
        let input = readLine()
        if let input = input {
            
            //–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω Enter –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –º–µ–Ω—å—à–µ 1
            if input == "" && array.count < 1 {
                print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í—ã –≤–≤–µ–ª–∏ –º–µ–Ω—å—à–µ –æ–¥–Ω–æ–π –±—É–∫–≤—ã üö®")
                continue
            }
            //–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω Enter –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ 1
            if input == "" && array.count > 1 {
                print("==================================================")
                print("‚úÖ –°–ª–æ–≤–æ —Å–æ–∑–¥–∞–Ω–æ:\(array) ‚úÖ")
                print("==================================================")
                break
            }
            //–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if input.count > 1 {
                print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ üö®")
                continue
            }
            
            if !alphabet.contains(input) {
                print("–í—ã –≤–≤–µ–ª–∏ –±—É–∫–≤—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ")
                continue
            }
            
            array.append(input)
            
        }else {
            continue
        }
    }
    return array
}
func taskOne(Alphabet alphabet: Array<String>, Word word: String) {
    print("–ê–ª—Ñ–∞–≤–∏—Ç: \(alphabet), –°–ª–æ–≤–æ:\(word), n = \(alphabet.count), k = \(word.count)")
    print("==================================================")
    print("""
          N = n·¥∑‚Åª¬π * i‚ÇÅ + n·¥∑‚Åª¬≤ * i‚ÇÇ + n·¥∑‚Åª¬≥ * i‚ÇÉ + ... + i‚Çñ
          """)

//–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –û–¥–∏–Ω
    var formulaOne: String = "N = "
    let counter = 1
    for i in (0..<word.count) {
        formulaOne.append("\(alphabet.count)\(valueToPower(Value: word.count))‚Åª\(valueToPower(Value: counter + i)) ‚àô \(numberWordInAlphabet(Alphabet: alphabet, Word: word, Position: i + 1)) + ")
    }
    formulaOne.removeLast()
    formulaOne.removeLast()
    
    //–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –î–≤–∞
    var formulaTwo: String = "N = "
    for i in (0..<word.count) {
        formulaTwo.append("\(alphabet.count)\(valueToPower(Value: word.count - (i + 1))) ‚àô \(numberWordInAlphabet(Alphabet: alphabet, Word: word, Position: i + 1)) + ")
    }
    
    formulaTwo.removeLast()
    formulaTwo.removeLast()
    
    print(formulaOne)
    print(formulaTwo)
    
    //—Å—á–∏—Ç–∞–µ–º
    var result:Decimal = 0
    for i in (0..<word.count) {
        let part = pow(Decimal(alphabet.count), word.count - (i + 1)) * Decimal(numberWordInAlphabet(Alphabet: alphabet, Word: word, Position: i + 1))
        result += part
    }
    print("N = \(result)")
}


func inputNumber(Alphabet: Array<String>) -> Int {
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞: ")
    while true {
        let input = readLine()
        if let input = Int(input!) {
            
            //–ï—Å–ª–∏ –≤–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞
            for i in 0..<Alphabet.count {
                if i == input {
                    print(Alphabet[i-1])
                    exit(0)
                }
            }
            
            //–ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞
            if input > Alphabet.count {
                return input
            }
            
            //–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ 0
            if input == 0 {
                print("Œµ")
                exit(0)
            }
        }else {
            print("üö® –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥. –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ üö®")
        }
    }
}
func divs(value: Double, delitel: Double) -> Array<Int> {
    var value = value
    var divs: Array<Int> = []
    while value >= delitel {
        if Int(value) % Int(delitel) == 0 {
            divs.append(Int(Int(value) / Int(delitel)) - 1)
            value = value / delitel
        }else if Int(value) % Int(delitel) != 0 {
            value = value / delitel
            divs.append(Int(trunc(Double(value))))
        }else {
            value = value / delitel
            divs.append(Int(floor(value)))
        }
    }
    //print(divs)
    for i in 0..<divs.count {
        if divs[i] == 0 {
            divs.remove(at: i)
        }
    }
    return divs
}
func ostatki(value: Int, delitel: Int, divs: Array<Int>) -> Array<Int> {
    var ostatki: Array<Int> = []
    var value = value
    for i in divs {
        let temp = value - (i * delitel)
        value = i
        ostatki.append(temp)
    }
    return ostatki
}

//task two
func expression(ostatki: Array<Int>, div: Array<Int>, delitel: Int, Alphabet: Array<String>) {
    var array: [String] = []
    for (_,j) in zip(div, ostatki) {
        let stroka = "( * \(delitel) + \(j))"
        array.append(stroka)
    }
    var result: String = ""
    for (i,j) in zip(array, 0..<array.count) {
        result.insert(contentsOf: i, at: result.index(result.startIndex, offsetBy: j))
    }
    for i in (0..<result.count) {
        if result[result.index(result.startIndex, offsetBy: i)] != "(" {
            result.insert(Character(String(div.last!)), at: result.index(result.startIndex, offsetBy: i))
            break
        }
    }
    
    let reversedOstat = Array<Int>(ostatki.reversed())
    var emptyString = ""
    let start = "\(div.last!)*\(delitel)\(valueToPower(Value: div.count)) + "
    emptyString.append(contentsOf: start)
    for i in 0..<div.count {
        let temp = "\(reversedOstat[i])*\(delitel)\(valueToPower(Value: div.count - i - 1)) + "
        emptyString.append(contentsOf: temp)
    }
    for _ in 0..<6 {
        emptyString.removeLast()

    }
    //–†–µ—à–µ–Ω–∏–µ
    var arrayForWord: [Int] = []
    arrayForWord.append(div.last!)
    
    for i in reversedOstat {
        arrayForWord.append(i)
    }
    
    var slovo = ""
    print("arrayForWord: \(arrayForWord)")
    for i in arrayForWord{
        if i == 0 {
            continue
        }
        slovo.append(Alphabet[i - 1])
    }
    print("==================================================")
    print("""
\(result) = \(emptyString) = \(slovo)
""")
}


let choose = actionMenu()
switch choose {
case 1:
    let alphabet = createArray()
    let word = inputWord(Alphabet: alphabet)
    
    taskOne(Alphabet: alphabet, Word: word)
case 2:
    let alphabet = createArray()
    let number = inputNumber(Alphabet: alphabet)
    
    let div = divs(value: Double(number), delitel: Double(alphabet.count))
    let ostatki = ostatki(value: number, delitel: alphabet.count, divs: div)
    
    expression(ostatki: ostatki, div: div, delitel: alphabet.count, Alphabet: alphabet)
default:
    print("Error")
}

